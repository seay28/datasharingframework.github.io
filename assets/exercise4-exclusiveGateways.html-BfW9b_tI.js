import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as o,e as i,f as a,d as s,a as n,r as d,o as c}from"./app-CJIENTLq.js";const h={};function u(p,e){const t=d("RouteLink");return c(),l("div",null,[o("p",null,[i(t,{to:"/oldstable/tutorial/prerequisites.html"},{default:a(()=>e[0]||(e[0]=[s("Prerequisites")])),_:1}),e[6]||(e[6]=s(" | ")),i(t,{to:"/oldstable/tutorial/exercise1-simpleProcess.html"},{default:a(()=>e[1]||(e[1]=[s("Exercise 1")])),_:1}),e[7]||(e[7]=s(" | ")),i(t,{to:"/oldstable/tutorial/exercise11-processDebugging.html"},{default:a(()=>e[2]||(e[2]=[s("Exercise 1.1")])),_:1}),e[8]||(e[8]=s(" | ")),i(t,{to:"/oldstable/tutorial/exercise2-inputParameters.html"},{default:a(()=>e[3]||(e[3]=[s("Exercise 2")])),_:1}),e[9]||(e[9]=s(" | ")),i(t,{to:"/oldstable/tutorial/exercise3-messageEvents.html"},{default:a(()=>e[4]||(e[4]=[s("Exercise 3")])),_:1}),e[10]||(e[10]=s(" | Exercise 4 | ")),i(t,{to:"/oldstable/tutorial/exercise5-eventBasedGateways.html"},{default:a(()=>e[5]||(e[5]=[s("Exercise 5")])),_:1})]),e[24]||(e[24]=n(`<h2 id="exercise-4-exclusive-gateways" tabindex="-1"><a class="header-anchor" href="#exercise-4-exclusive-gateways"><span>Exercise 4 - Exclusive Gateways</span></a></h2><p>Different execution paths in a process based on the state of process variables can be achieved using Exclusive Gateways. In Exercise 4 we will examine how this can be implemented by modifying the <code>highmedorg_helloDic</code> process.</p><h3 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h3><hr><h4 id="exclusive-gateways" tabindex="-1"><a class="header-anchor" href="#exclusive-gateways"><span>Exclusive Gateways</span></a></h4><p>Different sequence flows during the execution of a process instance can be modeled using BPMN <a href="https://docs.camunda.org/manual/7.4/reference/bpmn20/gateways/exclusive-gateway/" target="_blank" rel="noopener noreferrer">Exclusive Gateways</a>. For each outgoing sequence flow of the gateway, a BPMN <a href="https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#conditions" target="_blank" rel="noopener noreferrer">Condition Expression</a> can be added to the process model, deciding whether a sequence flow should be followed. Thereby, all condition decisions must be in an XOR relationship to each other.</p><h4 id="condition-expressions" tabindex="-1"><a class="header-anchor" href="#condition-expressions"><span>Condition Expressions</span></a></h4><p>A BPMN <a href="https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#conditions" target="_blank" rel="noopener noreferrer">Condition Expression</a> uses the <code>\${..}</code> notation. Within the curly braces all execution variables of a process instance can be accessed, e.g. the ones that were stored in a previous Java implementation of a BPMN <a href="https://docs.camunda.org/manual/7.17/reference/bpmn20/tasks/service-task/" target="_blank" rel="noopener noreferrer">ServiceTask</a>. For example, the BPMN <a href="https://docs.camunda.org/manual/7.17/user-guide/process-engine/expression-language/#conditions" target="_blank" rel="noopener noreferrer">Condition Expression</a> <code>\${cohortSize &gt; 100}</code> checks whether the value in the execution variable <em>cohortSize</em> is greater than 100.</p><h4 id="storing-modifying-process-variables" tabindex="-1"><a class="header-anchor" href="#storing-modifying-process-variables"><span>Storing / Modifying Process Variables</span></a></h4><p>Via the <code>DelegateExecution execution</code> parameter of the <code>doExecute</code> method of a class extending <code>AbstractServiceDelegate</code>, we can write and read process variables of the current process instance. The following code listing show how to write and read a <code>boolean</code> variable:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>	execution.setVariable(&quot;variable-name&quot;, Variables.booleanValue(false));</span></span>
<span class="line"><span>	boolean variable = (boolean) execution.getVariable(&quot;variable-name&quot;);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For more details on process variables see the <a href="https://docs.camunda.org/manual/7.17/user-guide/process-engine/variables/" target="_blank" rel="noopener noreferrer">Camunda documentation</a>.</p><h3 id="exercise-tasks" tabindex="-1"><a class="header-anchor" href="#exercise-tasks"><span>Exercise Tasks</span></a></h3><hr><ol><li>In the <code>HelloDic</code> class, write an algorithm deciding based on the &quot;leading&quot; Task&#39;s input parameter <code>tutorial-input</code>, whether the <code>highmedorg_helloCos</code> process should be started.</li><li>Add a boolean variable to the process instance execution variables storing the decision.</li><li>Add an exclusive gateway to the <code>highmedorg_helloDic</code> process model and two outgoing sequence flows - the first starting process <code>highmedorg_helloDic</code>, the second stopping process <code>highmedorg_helloDic</code> without starting process <code>highmedorg_helloCos</code>.</li><li>Add a condition expressions to each outgoing sequence flow based on the previously stored execution variable.</li></ol><h3 id="solution-verification" tabindex="-1"><a class="header-anchor" href="#solution-verification"><span>Solution Verification</span></a></h3><hr><h4 id="maven-build-and-automated-tests" tabindex="-1"><a class="header-anchor" href="#maven-build-and-automated-tests"><span>Maven Build and Automated Tests</span></a></h4><p>Execute a maven build of the dsf-process-tutorial parent module via:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mvn clean install -Pexercise-4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Verify that the build was successful and no test failures occurred.</p><h4 id="process-execution-and-manual-tests" tabindex="-1"><a class="header-anchor" href="#process-execution-and-manual-tests"><span>Process Execution and Manual Tests</span></a></h4><p>To verify the <code>highmedorg_helloDic</code> and <code>highmedorg_helloCos</code> processes can be executed successfully, we need to deploy them into DSF instances and execute the <code>highmedorg_helloDic</code> process. The maven <code>install</code> build is configured to create a process jar file with all necessary resources and copy the jar to the appropriate locations of the docker test setup.</p><ol><li>Start the DSF FHIR server for the <code>Test_DIC</code> organization in a console at location <code>.../dsf-process-tutorial/test-setup</code>:</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose up dic-fhir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Verify the DSF FHIR server started successfully.</p><ol start="2"><li>Start the DSF BPE server for the <code>Test_DIC</code> organization in a second console at location <code>.../dsf-process-tutorial/test-setup</code>:</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose up cos-fhir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Verify the DSF FHIR server started successfully.</p><ol start="3"><li>Start the DSF BPE server for the <code>Test_COS</code> organization in a fourth console at location <code>.../dsf-process-tutorial/test-setup</code>:</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose up cos-bpe</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Verify the DSF BPE server started successfully and deployed the <code>highmedorg_helloCos</code> process.</p><ol start="4"><li>Start the <code>highmedorg_helloDic</code> process by posting a specific FHIR <a href="http://hl7.org/fhir/R4/task.html" target="_blank" rel="noopener noreferrer">Task</a> resource to the DSF FHIR server of the <code>Test_DIC</code> organization: Execute therefore the <code>main</code> method of the <code>org.highmed.dsf.process.tutorial.TutorialExampleStarter</code> class to create the <a href="http://hl7.org/fhir/R4/task.html" target="_blank" rel="noopener noreferrer">Task</a> resource needed to start the <code>highmedorg_helloDic</code> process.</li></ol><p>Verify that the <code>highmedorg_helloDic</code> process was executed successfully by the <code>Test_DIC</code> DSF BPE server and possibly the <code>highmedorg_helloCos</code> process by the <code>Test_COS</code> DSF BPE server, depending on whether decision of your algorithm based on the input parameter allowed to start the <code>highmedorg_helloDic</code> process.</p>`,34)),o("p",null,[e[12]||(e[12]=s("Continue with ")),i(t,{to:"/oldstable/tutorial/exercise5-eventBasedGateways.html"},{default:a(()=>e[11]||(e[11]=[s("exercise 5")])),_:1})]),e[25]||(e[25]=o("hr",null,null,-1)),o("p",null,[i(t,{to:"/oldstable/tutorial/prerequisites.html"},{default:a(()=>e[13]||(e[13]=[s("Prerequisites")])),_:1}),e[19]||(e[19]=s(" | ")),i(t,{to:"/oldstable/tutorial/exercise1-simpleProcess.html"},{default:a(()=>e[14]||(e[14]=[s("Exercise 1")])),_:1}),e[20]||(e[20]=s(" | ")),i(t,{to:"/oldstable/tutorial/exercise11-processDebugging.html"},{default:a(()=>e[15]||(e[15]=[s("Exercise 1.1")])),_:1}),e[21]||(e[21]=s(" | ")),i(t,{to:"/oldstable/tutorial/exercise2-inputParameters.html"},{default:a(()=>e[16]||(e[16]=[s("Exercise 2")])),_:1}),e[22]||(e[22]=s(" | ")),i(t,{to:"/oldstable/tutorial/exercise3-messageEvents.html"},{default:a(()=>e[17]||(e[17]=[s("Exercise 3")])),_:1}),e[23]||(e[23]=s(" | Exercise 4 | ")),i(t,{to:"/oldstable/tutorial/exercise5-eventBasedGateways.html"},{default:a(()=>e[18]||(e[18]=[s("Exercise 5")])),_:1})])])}const b=r(h,[["render",u],["__file","exercise4-exclusiveGateways.html.vue"]]),f=JSON.parse('{"path":"/oldstable/tutorial/exercise4-exclusiveGateways.html","title":"Exercise 4 - Exclusive Gateways","lang":"en-US","frontmatter":{"title":"Exercise 4 - Exclusive Gateways","icon":"slides","gitInclude":[]},"headers":[{"level":2,"title":"Exercise 4 - Exclusive Gateways","slug":"exercise-4-exclusive-gateways","link":"#exercise-4-exclusive-gateways","children":[{"level":3,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":3,"title":"Exercise Tasks","slug":"exercise-tasks","link":"#exercise-tasks","children":[]},{"level":3,"title":"Solution Verification","slug":"solution-verification","link":"#solution-verification","children":[]}]}],"readingTime":{"minutes":2.29,"words":686},"filePathRelative":"oldstable/tutorial/exercise4-exclusiveGateways.md","excerpt":"<p><a href=\\"/oldstable/tutorial/prerequisites.html\\" target=\\"_blank\\">Prerequisites</a> | <a href=\\"/oldstable/tutorial/exercise1-simpleProcess.html\\" target=\\"_blank\\">Exercise 1</a> | <a href=\\"/oldstable/tutorial/exercise11-processDebugging.html\\" target=\\"_blank\\">Exercise 1.1</a> | <a href=\\"/oldstable/tutorial/exercise2-inputParameters.html\\" target=\\"_blank\\">Exercise 2</a> | <a href=\\"/oldstable/tutorial/exercise3-messageEvents.html\\" target=\\"_blank\\">Exercise 3</a> | Exercise 4 | <a href=\\"/oldstable/tutorial/exercise5-eventBasedGateways.html\\" target=\\"_blank\\">Exercise 5</a></p>"}');export{b as comp,f as data};
