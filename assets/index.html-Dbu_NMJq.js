import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a,b as t,d as s,e as i,f as n,r as d,o as u}from"./app-CJIENTLq.js";const p={};function m(g,e){const r=d("RouteLink");return u(),o("div",null,[e[34]||(e[34]=a('<h2 id="implementing-bpmn-processes-as-dsf-process-plugins" tabindex="-1"><a class="header-anchor" href="#implementing-bpmn-processes-as-dsf-process-plugins"><span>Implementing BPMN Processes as DSF Process-Plugins</span></a></h2><p>This <a href="https://github.com/highmed/dsf-process-tutorial" target="_blank" rel="noopener noreferrer">repository</a> contains exercises to learn how to implement process plugins for the <a href="https://github.com/highmed/highmed-dsf" target="_blank" rel="noopener noreferrer">Data Sharing Framework (DSF)</a>. The tutorial is divided into several exercises that build on each other. For each exercise, a sample solution is provided in a separate branch.<br> This tutorial was first executed at the <a href="https://gmds-tmf-2022.de/" target="_blank" rel="noopener noreferrer">GMDS / TMF 2022</a> conference. A recording of the opening remarks by H. Hund and R. Wettstein can be found on <a href="https://gmds-tmf-2022.de/" target="_blank" rel="noopener noreferrer">YouTube</a>. The slides of the opening remarks are available as a <a href="https://raw.githubusercontent.com/highmed/dsf-process-tutorial/main/exercises/figures/2022-08-21_GMDS_2022_DSF_Process_Tutorial.pdf" target="_blank" rel="noopener noreferrer">PDF download</a>.</p><h3 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites"><span>Prerequisites</span></a></h3><hr>',4)),t("p",null,[e[1]||(e[1]=s("In order to be able to solve the exercises described in this tutorial a software development environment with git, Java 11, Maven 3.8, Docker, docker-compose, a Java IDE like Eclipse or IntelliJ, a BPMN Editor like the Camunda Modeler and a minimum 16GB of RAM is needed. For more details see the ")),i(r,{to:"/oldstable/tutorial/prerequisites.html"},{default:n(()=>e[0]||(e[0]=[s("detailed prerequisites document")])),_:1}),e[2]||(e[2]=s("."))]),e[35]||(e[35]=t("h3",{id:"exercise-1-simple-process",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#exercise-1-simple-process"},[t("span",null,"Exercise 1 - Simple Process")])],-1)),e[36]||(e[36]=t("hr",null,null,-1)),t("p",null,[e[4]||(e[4]=s("The first exercise focuses on setting up the testing environment used in this tutorial and shows how to implement and execute a simple BPMN process. For more details see the ")),i(r,{to:"/oldstable/tutorial/exercise1-simpleProcess.html"},{default:n(()=>e[3]||(e[3]=[s("exercise 1 description")])),_:1}),e[5]||(e[5]=s("."))]),e[37]||(e[37]=t("h4",{id:"exercise-1-1-process-debugging",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#exercise-1-1-process-debugging"},[t("span",null,"Exercise 1.1 - Process Debugging")])],-1)),e[38]||(e[38]=t("hr",null,null,-1)),t("p",null,[e[7]||(e[7]=s("Exercise 1.1 looks at how to use the Java debugger of your IDE to remote debug the execution of a process plugin. For more details see the ")),i(r,{to:"/oldstable/tutorial/exercise11-processDebugging.html"},{default:n(()=>e[6]||(e[6]=[s("exercise 1.1 description")])),_:1}),e[8]||(e[8]=s("."))]),e[39]||(e[39]=t("h3",{id:"exercise-2-input-parameters",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#exercise-2-input-parameters"},[t("span",null,"Exercise 2 - Input Parameters")])],-1)),e[40]||(e[40]=t("hr",null,null,-1)),t("p",null,[e[10]||(e[10]=s("In order to configure processes that are packaged as process plugins, we will take a look at two possibilities on how to pass parameters to a process. For more details see the ")),i(r,{to:"/oldstable/tutorial/exercise2-inputParameters.html"},{default:n(()=>e[9]||(e[9]=[s("exercise 2 description")])),_:1}),e[11]||(e[11]=s("."))]),e[41]||(e[41]=t("h3",{id:"exercise-3-message-events",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#exercise-3-message-events"},[t("span",null,"Exercise 3 - Message Events")])],-1)),e[42]||(e[42]=t("hr",null,null,-1)),t("p",null,[e[13]||(e[13]=s("Communication between organizations is modeled using message flow in BPMN processes. The third exercise shows how a process at one organization can trigger a process at another organization. For more details see the ")),i(r,{to:"/oldstable/tutorial/exercise3-messageEvents.html"},{default:n(()=>e[12]||(e[12]=[s("exercise 3 description")])),_:1}),e[14]||(e[14]=s("."))]),e[43]||(e[43]=t("h3",{id:"exercise-4-exclusive-gateways",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#exercise-4-exclusive-gateways"},[t("span",null,"Exercise 4 - Exclusive Gateways")])],-1)),e[44]||(e[44]=t("hr",null,null,-1)),t("p",null,[e[16]||(e[16]=s("Different execution paths in a process based on the state of process variables can be achieved using Exclusive Gateways. In Exercise 4 we will examine how this can be implemented. For more details see the ")),i(r,{to:"/oldstable/tutorial/exercise4-exclusiveGateways.html"},{default:n(()=>e[15]||(e[15]=[s("exercise 4 description")])),_:1}),e[17]||(e[17]=s("."))]),e[45]||(e[45]=t("h3",{id:"exercise-5-event-based-gateways-and-intermediate-events",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#exercise-5-event-based-gateways-and-intermediate-events"},[t("span",null,"Exercise 5 - Event Based Gateways and Intermediate Events")])],-1)),e[46]||(e[46]=t("hr",null,null,-1)),t("p",null,[e[19]||(e[19]=s("In the final exercise we will look at message flow between three organizations as well as how to continue a waiting process if no return message arrives. For more details see the ")),i(r,{to:"/oldstable/tutorial/exercise5-eventBasedGateways.html"},{default:n(()=>e[18]||(e[18]=[s("exercise 5 description")])),_:1}),e[20]||(e[20]=s("."))]),e[47]||(e[47]=t("hr",null,null,-1)),t("p",null,[i(r,{to:"/oldstable/tutorial/prerequisites.html"},{default:n(()=>e[21]||(e[21]=[s("Prerequisites")])),_:1}),e[28]||(e[28]=s(" | ")),i(r,{to:"/oldstable/tutorial/exercise1-simpleProcess.html"},{default:n(()=>e[22]||(e[22]=[s("Exercise 1")])),_:1}),e[29]||(e[29]=s(" | ")),i(r,{to:"/oldstable/tutorial/exercise11-processDebugging.html"},{default:n(()=>e[23]||(e[23]=[s("Exercise 1.1")])),_:1}),e[30]||(e[30]=s(" | ")),i(r,{to:"/oldstable/tutorial/exercise2-inputParameters.html"},{default:n(()=>e[24]||(e[24]=[s("Exercise 2")])),_:1}),e[31]||(e[31]=s(" | ")),i(r,{to:"/oldstable/tutorial/exercise3-messageEvents.html"},{default:n(()=>e[25]||(e[25]=[s("Exercise 3")])),_:1}),e[32]||(e[32]=s(" | ")),i(r,{to:"/oldstable/tutorial/exercise4-exclusiveGateways.html"},{default:n(()=>e[26]||(e[26]=[s("Exercise 4")])),_:1}),e[33]||(e[33]=s(" | ")),i(r,{to:"/oldstable/tutorial/exercise5-eventBasedGateways.html"},{default:n(()=>e[27]||(e[27]=[s("Exercise 5")])),_:1})])])}const h=l(p,[["render",m],["__file","index.html.vue"]]),b=JSON.parse('{"path":"/oldstable/tutorial/","title":"DSF Process Plugin Tutorial","lang":"en-US","frontmatter":{"title":"DSF Process Plugin Tutorial","icon":"slides","gitInclude":[]},"headers":[{"level":2,"title":"Implementing BPMN Processes as DSF Process-Plugins","slug":"implementing-bpmn-processes-as-dsf-process-plugins","link":"#implementing-bpmn-processes-as-dsf-process-plugins","children":[{"level":3,"title":"Prerequisites","slug":"prerequisites","link":"#prerequisites","children":[]},{"level":3,"title":"Exercise 1 - Simple Process","slug":"exercise-1-simple-process","link":"#exercise-1-simple-process","children":[]},{"level":3,"title":"Exercise 2 - Input Parameters","slug":"exercise-2-input-parameters","link":"#exercise-2-input-parameters","children":[]},{"level":3,"title":"Exercise 3 - Message Events","slug":"exercise-3-message-events","link":"#exercise-3-message-events","children":[]},{"level":3,"title":"Exercise 4 - Exclusive Gateways","slug":"exercise-4-exclusive-gateways","link":"#exercise-4-exclusive-gateways","children":[]},{"level":3,"title":"Exercise 5 - Event Based Gateways and Intermediate Events","slug":"exercise-5-event-based-gateways-and-intermediate-events","link":"#exercise-5-event-based-gateways-and-intermediate-events","children":[]}]}],"readingTime":{"minutes":1.53,"words":458},"filePathRelative":"oldstable/tutorial/README.md","excerpt":"<h2>Implementing BPMN Processes as DSF Process-Plugins</h2>\\n<p>This <a href=\\"https://github.com/highmed/dsf-process-tutorial\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">repository</a> contains exercises to learn how to implement process plugins for the <a href=\\"https://github.com/highmed/highmed-dsf\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Data Sharing Framework (DSF)</a>. The tutorial is divided into several exercises that build on each other. For each exercise, a sample solution is provided in a separate branch.<br>\\nThis tutorial was first executed at the <a href=\\"https://gmds-tmf-2022.de/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">GMDS / TMF 2022</a> conference. A recording of the opening remarks by H. Hund and R. Wettstein can be found on <a href=\\"https://gmds-tmf-2022.de/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">YouTube</a>. The slides of the opening remarks are available as a <a href=\\"https://raw.githubusercontent.com/highmed/dsf-process-tutorial/main/exercises/figures/2022-08-21_GMDS_2022_DSF_Process_Tutorial.pdf\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">PDF download</a>.</p>"}');export{h as comp,b as data};
