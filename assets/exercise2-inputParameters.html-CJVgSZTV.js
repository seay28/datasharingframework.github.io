import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as r,e as i,f as a,d as t,a as o,r as d,o as h}from"./app-CJIENTLq.js";const p={},u={start:"3"};function g(m,e){const s=d("RouteLink");return h(),l("div",null,[r("p",null,[i(s,{to:"/oldstable/tutorial/prerequisites.html"},{default:a(()=>e[0]||(e[0]=[t("Prerequisites")])),_:1}),e[6]||(e[6]=t(" | ")),i(s,{to:"/oldstable/tutorial/exercise1-simpleProcess.html"},{default:a(()=>e[1]||(e[1]=[t("Exercise 1")])),_:1}),e[7]||(e[7]=t(" | ")),i(s,{to:"/oldstable/tutorial/exercise11-processDebugging.html"},{default:a(()=>e[2]||(e[2]=[t("Exercise 1.1")])),_:1}),e[8]||(e[8]=t(" | Exercise 2 | ")),i(s,{to:"/oldstable/tutorial/exercise3-messageEvents.html"},{default:a(()=>e[3]||(e[3]=[t("Exercise 3")])),_:1}),e[9]||(e[9]=t(" | ")),i(s,{to:"/oldstable/tutorial/exercise4-exclusiveGateways.html"},{default:a(()=>e[4]||(e[4]=[t("Exercise 4")])),_:1}),e[10]||(e[10]=t(" | ")),i(s,{to:"/oldstable/tutorial/exercise5-eventBasedGateways.html"},{default:a(()=>e[5]||(e[5]=[t("Exercise 5")])),_:1})]),e[66]||(e[66]=o('<h2 id="exercise-2-input-parameters" tabindex="-1"><a class="header-anchor" href="#exercise-2-input-parameters"><span>Exercise 2 - Input Parameters</span></a></h2><p>In order to configure processes that are packaged as process plugins, we will take a look at two possibilities on how to pass parameters to a process. The goal of this exercise is to enhance the <code>highmedorg_helloDic</code> process by trying them both.</p><h3 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h3><hr><p>DSF process plugins can be configured with input parameters using two different approaches:</p><ul><li>Static configuration using environment variables during the deployment of a process plugin.</li><li>Dynamic configuration by sending values as part of the <a href="http://hl7.org/fhir/R4/task.html" target="_blank" rel="noopener noreferrer">Task</a> resource to start or continue a process instance.</li></ul><h4 id="environment-variables" tabindex="-1"><a class="header-anchor" href="#environment-variables"><span>Environment Variables</span></a></h4><p>Environment variables are the same for all running process instances and allow static configuration of processes. They can be defined by adding a member variable having the <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-value-annotations" target="_blank" rel="noopener noreferrer">Spring-Framework @Value</a> annotation to the configuration class <code>TutorialConfig</code>. The value of the annotation uses the <code>${..}</code> notation and follows the form <code>${some.property:defaultValue}</code>, where each dot in the property name corresponds to an underscore in the environment variable and environment variables are always written upper-case. The property <code>some.property</code> therefore corresponds to the environment variable <code>SOME_PROPERTY</code>.</p><p>To create an automated documentation of environment variables during the Maven build process, the DSF provided <a href="https://github.com/highmed/highmed-dsf/blob/main/dsf-tools/dsf-tools-documentation-generator/src/main/java/org/highmed/dsf/tools/generator/ProcessDocumentation.java" target="_blank" rel="noopener noreferrer">@ProcessDocumentation</a> annotation from the package <code>org.highmed.dsf.tools.generator</code> can be used. The <code>pom.xml</code> of the <code>tutorial-process</code> submodule calls the DSF provided <a href="https://github.com/highmed/highmed-dsf/blob/main/dsf-tools/dsf-tools-documentation-generator/src/main/java/org/highmed/dsf/tools/generator/DocumentationGenerator.java" target="_blank" rel="noopener noreferrer">DocumentGenerator</a> class from the same package during the prepare-package phase of the build process. The generator searches for all <a href="https://github.com/highmed/highmed-dsf/blob/main/dsf-tools/dsf-tools-documentation-generator/src/main/java/org/highmed/dsf/tools/generator/ProcessDocumentation.java" target="_blank" rel="noopener noreferrer">@ProcessDocumentation</a> annotations and generates a Markdown documentation based on the annotation&#39;s values in the target folder.</p><h4 id="task-input-parameters" tabindex="-1"><a class="header-anchor" href="#task-input-parameters"><span>Task Input Parameters</span></a></h4><p>Providing input parameters to a specific process instance allows for dynamic configuration of process instances. It can be done by sending additional values as part of the <a href="http://hl7.org/fhir/R4/task.html" target="_blank" rel="noopener noreferrer">Task</a> resource that starts or continues a process instance. It should be noted that a FHIR profile must be created for each <a href="http://hl7.org/fhir/R4/task.html" target="_blank" rel="noopener noreferrer">Task</a> resource, i.e. for each message event in a process model, which inherits from the <a href="https://github.com/highmed/highmed-dsf/blob/main/dsf-fhir/dsf-fhir-validation/src/main/resources/fhir/StructureDefinition/highmed-task-base-0.5.0.xml" target="_blank" rel="noopener noreferrer">DSF Task Base Profile</a>. This base profile defines three default input parameters:</p><ul><li><code>message-name</code> (mandatory 1..1): the name of the BPMN message event, same as in the BPMN model</li><li><code>business-key</code> (optional 0..1): used to identify process instances</li><li><code>correlation-key</code>(optional 0..1): used to identify multi-instance process instances used for messaging multiple targets</li></ul><p>A later exercise will examine these input parameters and their meaning in more detail.</p>',13)),r("p",null,[e[12]||(e[12]=t("Since input parameters of ")),e[13]||(e[13]=r("a",{href:"http://hl7.org/fhir/R4/task.html",target:"_blank",rel:"noopener noreferrer"},"Task",-1)),e[14]||(e[14]=t(" resources are identified by predefined codes, they are defined via FHIR ")),e[15]||(e[15]=r("a",{href:"http://hl7.org/fhir/R4/codesystem.html",target:"_blank",rel:"noopener noreferrer"},"CodeSystem",-1)),e[16]||(e[16]=t(" and ")),i(s,{to:"/oldstable/tutorial/hl7.org/fhir/R4/valueset.html"},{default:a(()=>e[11]||(e[11]=[t("ValueSet")])),_:1}),e[17]||(e[17]=t(" resources. The ")),e[18]||(e[18]=r("a",{href:"https://github.com/highmed/highmed-dsf/blob/main/dsf-fhir/dsf-fhir-validation/src/main/resources/fhir/CodeSystem/highmed-bpmn-message-0.5.0.xml",target:"_blank",rel:"noopener noreferrer"},"BPMN-Message CodeSystem",-1)),e[19]||(e[19]=t(" and the ")),e[20]||(e[20]=r("a",{href:"https://github.com/highmed/highmed-dsf/blob/main/dsf-fhir/dsf-fhir-validation/src/main/resources/fhir/ValueSet/highmed-bpmn-message-0.5.0.xml",target:"_blank",rel:"noopener noreferrer"},"BPMN-Message ValueSet",-1)),e[21]||(e[21]=t(" are used in the ")),e[22]||(e[22]=r("a",{href:"https://github.com/highmed/highmed-dsf/blob/main/dsf-fhir/dsf-fhir-validation/src/main/resources/fhir/StructureDefinition/highmed-task-base-0.5.0.xml",target:"_blank",rel:"noopener noreferrer"},"DSF Task Base Profile",-1)),e[23]||(e[23]=t(" to define the three default input parameters of ")),e[24]||(e[24]=r("a",{href:"http://hl7.org/fhir/R4/task.html",target:"_blank",rel:"noopener noreferrer"},"Task",-1)),e[25]||(e[25]=t(" resources."))]),e[67]||(e[67]=o(`<h4 id="version-and-release-date-placeholders" tabindex="-1"><a class="header-anchor" href="#version-and-release-date-placeholders"><span>Version and Release-Date Placeholders</span></a></h4><p>To avoid the need to specify the version and release date for each <a href="http://hl7.org/fhir/R4/codesystem.html" target="_blank" rel="noopener noreferrer">CodeSystem</a>, <a href="http://hl7.org/fhir/R4/structuredefinition.html" target="_blank" rel="noopener noreferrer">StructureDefinition (Task profile)</a> and <a href="http://hl7.org/fhir/R4/valueset.html" target="_blank" rel="noopener noreferrer">ValueSet</a> resource, the placeholders <code>#{version}</code> and <code>#{date}</code> can be used. They are replaced with the values returned by the methods <code>ProcessPluginDefinition#getVersion()</code> and <code>ProcessPluginDefinition#getReleaseDate()</code> respectively during deployment of a process plugin by the DSF BPE server.</p><p>Read Access Tag<br> While writing FHIR resources on the DSF FHIR server is only allowed by the own organization (except <a href="http://hl7.org/fhir/R4/task.html" target="_blank" rel="noopener noreferrer">Task</a>), rules have to be defined for reading FHIR resources by external organizations (again except <a href="http://hl7.org/fhir/R4/task.html" target="_blank" rel="noopener noreferrer">Task</a>). The <code>Resource.meta.tag</code> field is used for this purpose. To allow read access for all organizations (the standard for metadata resources), the following <code>read-access-tag</code> value can be written into this field:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">system</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://highmed.org/fhir/CodeSystem/read-access-tag&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">code</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ALL&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The read access rules for <a href="http://hl7.org/fhir/R4/task.html" target="_blank" rel="noopener noreferrer">Task</a> resources are defined through the fields <code>Task.requester</code> and <code>Task.restriction.recipient</code>. Therefore, no <code>read-access-tag</code> is needed.</p><p>It is also possible to restrict read access of FHIR resources to organizations with a specific role in a consortium or a specific identifier, but this is not covered in the tutorial.</p>`,6)),r("p",null,[e[28]||(e[28]=t("The write access rules for ")),e[29]||(e[29]=r("a",{href:"http://hl7.org/fhir/R4/task.html",target:"_blank",rel:"noopener noreferrer"},"Task",-1)),e[30]||(e[30]=t(" resources are defined through the ")),e[31]||(e[31]=r("a",{href:"http://hl7.org/fhir/R4/activitydefinition.html",target:"_blank",rel:"noopener noreferrer"},"ActivityDefinition",-1)),e[32]||(e[32]=t(" resources belonging to the process. We will take a look at this in ")),i(s,{to:"/oldstable/tutorial/exercise3-messageEvents.html"},{default:a(()=>e[26]||(e[26]=[t("exercise 3")])),_:1}),e[33]||(e[33]=t(" and ")),i(s,{to:"/oldstable/tutorial/exercise5-eventBasedGateways.html"},{default:a(()=>e[27]||(e[27]=[t("exercise 5")])),_:1}),e[34]||(e[34]=t("."))]),e[68]||(e[68]=o('<h3 id="exercise-tasks" tabindex="-1"><a class="header-anchor" href="#exercise-tasks"><span>Exercise Tasks</span></a></h3><hr><ol><li>Add an environment variable to enable/disable logging to the <code>TutorialConfig</code> class specify the default value as <code>false</code>.</li><li>Inject the value of the environment variable in to <code>HelloDic</code> class, by modifying its constructor and using the new field of the <code>TutorialConfig</code> class.</li><li>Use the value of the environment variable in the <code>HelloDic</code> class to decide whether the log message from exercise 1 should be printed.</li><li>Adapt <code>test-setup/docker-compose.yml</code> by adding the new environment variable to the service dic-bpe and set the value to <code>&quot;true&quot;</code>.</li><li>Create a new <a href="http://hl7.org/fhir/R4/codesystem.html" target="_blank" rel="noopener noreferrer">CodeSystem</a> with url <code>http://highmed.org/fhir/CodeSystem/tutorial</code> having a concept with code <code>tutorial-input</code>.</li><li>Create a new <a href="http://hl7.org/fhir/R4/valueset.html" target="_blank" rel="noopener noreferrer">ValueSet</a> with url <code>http://highmed.org/fhir/ValueSet/tutorial</code> that includes all concepts from the <a href="http://hl7.org/fhir/R4/codesystem.html" target="_blank" rel="noopener noreferrer">CodeSystem</a>.</li><li>Add the new <a href="http://hl7.org/fhir/R4/codesystem.html" target="_blank" rel="noopener noreferrer">CodeSystem</a> and ValueSet resources to the highmedorg_helloDic process in the TutorialProcessPluginDefinition class.</li><li>Add a new input parameter of type <code>string</code> to the <code>task-hello-dic.xml</code> <a href="http://hl7.org/fhir/R4/task.html" target="_blank" rel="noopener noreferrer">Task</a> profile using the concept of the new <a href="http://hl7.org/fhir/R4/codesystem.html" target="_blank" rel="noopener noreferrer">CodeSystem</a> as a fixed coding.</li><li>Read the new input parameter in the <code>HelloDic</code> class from the &quot;leading&quot; <a href="http://hl7.org/fhir/R4/task.html" target="_blank" rel="noopener noreferrer">Task</a> and add the value to the log message from exercise 1.</li><li>Adapt the starter class <code>TutorialExampleStarter</code> by adding the new input parameter with an arbitrary string.</li></ol><h3 id="solution-verification" tabindex="-1"><a class="header-anchor" href="#solution-verification"><span>Solution Verification</span></a></h3><hr><h4 id="maven-build-and-automated-tests" tabindex="-1"><a class="header-anchor" href="#maven-build-and-automated-tests"><span>Maven Build and Automated Tests</span></a></h4><p>Execute a maven build of the <code>dsf-process-tutorial</code> parent module via:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mvn clean install -Pexercise-2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Verify that the build was successful and no test failures occurred.</p><h4 id="process-execution-and-manual-tests" tabindex="-1"><a class="header-anchor" href="#process-execution-and-manual-tests"><span>Process Execution and Manual Tests</span></a></h4><p>To verify the <code>highmedorg_helloDic</code> process can be executed successfully, we need to deploy it into a DSF instance and execute the process. The maven <code>install</code> build is configured to create a process jar file with all necessary resources and copy the jar to the appropriate locations of the docker test setup.</p><ol><li>Start the DSF FHIR server for the <code>Test_DIC</code> organization in a console at location <code>.../dsf-process-tutorial/test-setup</code>:</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose up dic-fhir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Verify the DSF FHIR server started successfully.</p><ol start="2"><li>Start the DSF BPE server for the <code>Test_DIC</code> organization in second console at location <code>.../dsf-process-tutorial/test-setup</code>:</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose up dic-bpe</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Verify the DSF BPE server started successfully and deployed the highmedorg_helloDic process.</p>',17)),r("ol",u,[r("li",null,[e[36]||(e[36]=t("Start the ")),e[37]||(e[37]=r("code",null,"highmedorg_helloDic",-1)),e[38]||(e[38]=t(" process by posting an appropriate FHIR ")),e[39]||(e[39]=r("a",{href:"http://hl7.org/fhir/R4/task.html",target:"_blank",rel:"noopener noreferrer"},"Task",-1)),e[40]||(e[40]=t(" resource to the DSF FHIR server of the ")),e[41]||(e[41]=r("code",null,"Test_DIC",-1)),e[42]||(e[42]=t(" organization: Execute the ")),e[43]||(e[43]=r("code",null,"main",-1)),e[44]||(e[44]=t(" method of the ")),e[45]||(e[45]=r("code",null,"org.highmed.dsf.process.tutorial.TutorialExampleStarter",-1)),e[46]||(e[46]=t(" class as in ")),i(s,{to:"/oldstable/tutorial/exercise1-simpleProcess.html"},{default:a(()=>e[35]||(e[35]=[t("exercise 1")])),_:1}),e[47]||(e[47]=t(" to create the ")),e[48]||(e[48]=r("a",{href:"http://hl7.org/fhir/R4/task.html",target:"_blank",rel:"noopener noreferrer"},"Task",-1)),e[49]||(e[49]=t(" resource needed to start the ")),e[50]||(e[50]=r("code",null,"highmedorg_helloDic",-1)),e[51]||(e[51]=t(" process."))])]),e[69]||(e[69]=o('<p>Verify that the <code>highmedorg_helloDic</code> process was executed by the DSF BPE server. The BPE server should:</p><ul><li>Print a message showing that the process was started.</li><li>If logging is enabled - print the log message and the value of the input parameter you added to the <code>HelloDic</code> implementation.</li><li>Print a message showing that the process finished.</li></ul><p>Check that you can disable logging of you message by modifying the <code>docker-compose.yml</code> file and configuring your environment variable with the value <code>&quot;false&quot;</code> or removing the environment variable.<br> Note: Changes to environment variable require recreating the docker container.</p><p>Also check that modification to the <a href="http://hl7.org/fhir/R4/task.html" target="_blank" rel="noopener noreferrer">Task</a> input parameter specified in the <code>TutorialExampleStarter</code> class, have the appropriate effect on your log message.</p>',4)),r("p",null,[e[53]||(e[53]=t("Continue with ")),i(s,{to:"/oldstable/tutorial/exercise3-messageEvents.html"},{default:a(()=>e[52]||(e[52]=[t("Exercise 3")])),_:1}),e[54]||(e[54]=t("."))]),e[70]||(e[70]=r("hr",null,null,-1)),r("p",null,[i(s,{to:"/oldstable/tutorial/prerequisites.html"},{default:a(()=>e[55]||(e[55]=[t("Prerequisites")])),_:1}),e[61]||(e[61]=t(" | ")),i(s,{to:"/oldstable/tutorial/exercise1-simpleProcess.html"},{default:a(()=>e[56]||(e[56]=[t("Exercise 1")])),_:1}),e[62]||(e[62]=t(" | ")),i(s,{to:"/oldstable/tutorial/exercise11-processDebugging.html"},{default:a(()=>e[57]||(e[57]=[t("Exercise 1.1")])),_:1}),e[63]||(e[63]=t(" | Exercise 2 | ")),i(s,{to:"/oldstable/tutorial/exercise3-messageEvents.html"},{default:a(()=>e[58]||(e[58]=[t("Exercise 3")])),_:1}),e[64]||(e[64]=t(" | ")),i(s,{to:"/oldstable/tutorial/exercise4-exclusiveGateways.html"},{default:a(()=>e[59]||(e[59]=[t("Exercise 4")])),_:1}),e[65]||(e[65]=t(" | ")),i(s,{to:"/oldstable/tutorial/exercise5-eventBasedGateways.html"},{default:a(()=>e[60]||(e[60]=[t("Exercise 5")])),_:1})])])}const k=n(p,[["render",g],["__file","exercise2-inputParameters.html.vue"]]),b=JSON.parse('{"path":"/oldstable/tutorial/exercise2-inputParameters.html","title":"Exercise 2 - Input Parameters","lang":"en-US","frontmatter":{"title":"Exercise 2 - Input Parameters","icon":"slides","gitInclude":[]},"headers":[{"level":2,"title":"Exercise 2 - Input Parameters","slug":"exercise-2-input-parameters","link":"#exercise-2-input-parameters","children":[{"level":3,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":3,"title":"Exercise Tasks","slug":"exercise-tasks","link":"#exercise-tasks","children":[]},{"level":3,"title":"Solution Verification","slug":"solution-verification","link":"#solution-verification","children":[]}]}],"readingTime":{"minutes":4.58,"words":1373},"filePathRelative":"oldstable/tutorial/exercise2-inputParameters.md","excerpt":"<p><a href=\\"/oldstable/tutorial/prerequisites.html\\" target=\\"_blank\\">Prerequisites</a> | <a href=\\"/oldstable/tutorial/exercise1-simpleProcess.html\\" target=\\"_blank\\">Exercise 1</a> | <a href=\\"/oldstable/tutorial/exercise11-processDebugging.html\\" target=\\"_blank\\">Exercise 1.1</a> | Exercise 2 | <a href=\\"/oldstable/tutorial/exercise3-messageEvents.html\\" target=\\"_blank\\">Exercise 3</a> | <a href=\\"/oldstable/tutorial/exercise4-exclusiveGateways.html\\" target=\\"_blank\\">Exercise 4</a> | <a href=\\"/oldstable/tutorial/exercise5-eventBasedGateways.html\\" target=\\"_blank\\">Exercise 5</a></p>"}');export{k as comp,b as data};
