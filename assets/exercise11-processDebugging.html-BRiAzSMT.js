import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as l,e as s,f as r,d as t,a as o,r as d,o as u}from"./app-CJIENTLq.js";const p="/photos/guideline/tutorial/eclipse.png",g="/photos/guideline/tutorial/intelliJ.png",m={};function b(c,e){const i=d("RouteLink");return u(),n("div",null,[l("p",null,[s(i,{to:"/oldstable/tutorial/prerequisites.html"},{default:r(()=>e[0]||(e[0]=[t("Prerequisites")])),_:1}),e[6]||(e[6]=t(" | ")),s(i,{to:"/oldstable/tutorial/exercise1-simpleProcess.html"},{default:r(()=>e[1]||(e[1]=[t("Exercise 1")])),_:1}),e[7]||(e[7]=t(" | Exercise 1.1 | ")),s(i,{to:"/oldstable/tutorial/exercise2-inputParameters.html"},{default:r(()=>e[2]||(e[2]=[t("Exercise 2")])),_:1}),e[8]||(e[8]=t(" | ")),s(i,{to:"/oldstable/tutorial/exercise3-messageEvents.html"},{default:r(()=>e[3]||(e[3]=[t("Exercise 3")])),_:1}),e[9]||(e[9]=t(" | ")),s(i,{to:"/oldstable/tutorial/exercise4-exclusiveGateways.html"},{default:r(()=>e[4]||(e[4]=[t("Exercise 4")])),_:1}),e[10]||(e[10]=t(" | ")),s(i,{to:"/oldstable/tutorial/exercise5-eventBasedGateways.html"},{default:r(()=>e[5]||(e[5]=[t("Exercise 5")])),_:1})]),e[30]||(e[30]=o('<h2 id="exercise-1-1-process-debugging" tabindex="-1"><a class="header-anchor" href="#exercise-1-1-process-debugging"><span>Exercise 1.1 - Process Debugging</span></a></h2><p>This exercise looks at how to use the Java debugger of your IDE to remote debug the execution of a process plugin.</p><h3 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h3><hr><p>The DSF FHIR server and the DSF BPE server applications are written in Java and as such are execute on a headless JRE 11 within their docker containers. Command line arguments can be passed to the JVM inside the <a href="http://ghcr.io/highmed/fhir" target="_blank" rel="noopener noreferrer">ghcr.io/highmed/fhir</a> and <a href="http://ghcr.io/highmed/bpe" target="_blank" rel="noopener noreferrer">ghcr.io/highmed/bpe</a> docker images by specifying the environment variable <code>EXTRA_JVM_ARGS</code>. This can be used for example to configure the minimum and maximum heap of the JVM; but can also be used to specify a remote debugging port, which we will use in this exercise.</p>',5)),l("p",null,[e[12]||(e[12]=t("An ")),e[13]||(e[13]=l("code",null,"EXTRA_JVM_ARGS",-1)),e[14]||(e[14]=t(" environment variable is already configure for all DSF FHIR server and DSF BPE server docker containers in the tutorial docker-compose test setup. Take a look at the ")),s(i,{to:"/oldstable/tutorial/ex11-docker-composeyml.html"},{default:r(()=>e[11]||(e[11]=[t("docker-compose.yml")])),_:1}),e[15]||(e[15]=t(" file to lookup the port numbers specified for the different DSF FHIR and DSF BPE servers."))]),e[31]||(e[31]=o('<h3 id="exercise-tasks" tabindex="-1"><a class="header-anchor" href="#exercise-tasks"><span>Exercise Tasks</span></a></h3><hr><ol><li>Start the DSF FHIR server for the <code>Test_DIC</code> organization in a console at location <code>.../dsf-process-tutorial/test-setup</code>:</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose up dic-fhir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>Start the DSF BPE server for the <code>Test_DIC</code> organization in second console at location <code>.../dsf-process-tutorial/test-setup</code>:</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose up dic-bpe</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>Configure your Java IDE for remote debugging</li></ol><ul><li><p>Eclipse:<br><img src="'+p+'" alt="Eclipse" loading="lazy"></p></li><li><p>IntelliJ:<br><img src="'+g+'" alt="IntelliJ" loading="lazy"></p></li></ul><ol start="4"><li><p>Create a debug breakpoint in the first line of the <code>HelloDic</code> class <code>doExecute</code> method.</p></li><li><p>Start your previously defined remote Java debugger in your IDE.</p></li><li><p>Execute the <code>TutorialExampleStarter</code> class to start <code>highmed_helloDic</code> process.</p></li><li><p>User your IDE&#39;s debugger to step thru the code of the <code>HelloDic</code> class <code>doExecute</code> method.</p></li></ol>',9)),l("p",null,[e[17]||(e[17]=t("Continue with ")),s(i,{to:"/oldstable/tutorial/exercise2-inputParameters.html"},{default:r(()=>e[16]||(e[16]=[t("Exercise 2")])),_:1}),e[18]||(e[18]=t("."))]),e[32]||(e[32]=l("hr",null,null,-1)),l("p",null,[s(i,{to:"/oldstable/tutorial/prerequisites.html"},{default:r(()=>e[19]||(e[19]=[t("Prerequisites")])),_:1}),e[25]||(e[25]=t(" | ")),s(i,{to:"/oldstable/tutorial/exercise1-simpleProcess.html"},{default:r(()=>e[20]||(e[20]=[t("Exercise 1")])),_:1}),e[26]||(e[26]=t(" | Exercise 1.1 | ")),s(i,{to:"/oldstable/tutorial/exercise2-inputParameters.html"},{default:r(()=>e[21]||(e[21]=[t("Exercise 2")])),_:1}),e[27]||(e[27]=t(" | ")),s(i,{to:"/oldstable/tutorial/exercise3-messageEvents.html"},{default:r(()=>e[22]||(e[22]=[t("Exercise 3")])),_:1}),e[28]||(e[28]=t(" | ")),s(i,{to:"/oldstable/tutorial/exercise4-exclusiveGateways.html"},{default:r(()=>e[23]||(e[23]=[t("Exercise 4")])),_:1}),e[29]||(e[29]=t(" | ")),s(i,{to:"/oldstable/tutorial/exercise5-eventBasedGateways.html"},{default:r(()=>e[24]||(e[24]=[t("Exercise 5")])),_:1})])])}const f=a(m,[["render",b],["__file","exercise11-processDebugging.html.vue"]]),k=JSON.parse('{"path":"/oldstable/tutorial/exercise11-processDebugging.html","title":"Exercise 1.1 - Process Debugging","lang":"en-US","frontmatter":{"title":"Exercise 1.1 - Process Debugging","icon":"slides","gitInclude":[]},"headers":[{"level":2,"title":"Exercise 1.1 - Process Debugging","slug":"exercise-1-1-process-debugging","link":"#exercise-1-1-process-debugging","children":[{"level":3,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":3,"title":"Exercise Tasks","slug":"exercise-tasks","link":"#exercise-tasks","children":[]}]}],"readingTime":{"minutes":1.14,"words":341},"filePathRelative":"oldstable/tutorial/exercise11-processDebugging.md","excerpt":"<p><a href=\\"/oldstable/tutorial/prerequisites.html\\" target=\\"_blank\\">Prerequisites</a> | <a href=\\"/oldstable/tutorial/exercise1-simpleProcess.html\\" target=\\"_blank\\">Exercise 1</a> | Exercise 1.1 | <a href=\\"/oldstable/tutorial/exercise2-inputParameters.html\\" target=\\"_blank\\">Exercise 2</a> | <a href=\\"/oldstable/tutorial/exercise3-messageEvents.html\\" target=\\"_blank\\">Exercise 3</a> | <a href=\\"/oldstable/tutorial/exercise4-exclusiveGateways.html\\" target=\\"_blank\\">Exercise 4</a> | <a href=\\"/oldstable/tutorial/exercise5-eventBasedGateways.html\\" target=\\"_blank\\">Exercise 5</a></p>"}');export{f as comp,k as data};
